buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'com.iexec.core'
sourceCompatibility = 1.8

def UNIQUE_ID='hostname -f'.execute().text.trim()
def token='curl -XPOST --data name=${UNIQUE_ID} https://c770a93177c87a84c17cdfadc2f2a14f504988b89998083a:@packagecloud.io/install/repositories/iexec/common-new/tokens.text'.execute().text.trim()

repositories {
	mavenCentral()
	jcenter()
    maven {
        url "https://packagecloud.io/priv/${token}/iexec/common-new/maven2"
    }
}

configurations {
    deployerJars
}

dependencies {
    // iexec
    compile "com.iexec.common:iexec-common-new:$iexecCommonVersion"
    //compile files('../iexec-common-new/build/libs/iexec-common-new-0.0.1-SNAPSHOT.jar')

    // spring
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.boot:spring-boot-starter-aop"

    testCompile "org.springframework.boot:spring-boot-starter-test"

    // swagger
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

	// package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/TestCoverageReport")
}
// the test coverage report will be created just before the build
build.dependsOn jacocoTestReport

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "remotes/origin/master"
def canUploadArchives = isMasterBranch

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "packagecloud+https://packagecloud.io/iexec/core") {
            authentication(password: packageCloudPassword)
        }
    }
}
uploadArchives.enabled = canUploadArchives

import org.apache.tools.ant.filters.ReplaceTokens

// create the version controller for the core
task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/core/utils/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/core/utils/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion